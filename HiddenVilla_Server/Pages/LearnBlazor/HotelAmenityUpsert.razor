@page "/hotel-amenity/create"
@page "/hotel-amenity/edit/{Id:int}"

@using Models;
@using Business.Repository.IRepository

@inject IHotelAmenityRepository HotelAmenityRepository
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@attribute [Authorize(Roles = Common.SD.Role_Admin)]
<div class="row mt-2 mb-5">
    <h3 class="card-title text-info mb-3 ml-3">@Title Hotel Room Amenity</h3>
    <div class="col-md-12">
        <div class="card">
            <div class="card-body">
                <EditForm Model="HotelAmenityDTO" OnValidSubmit="HandleHotelAmenityUpsert">
                    <DataAnnotationsValidator></DataAnnotationsValidator>
                    <div class="form-group">
                        <label>Name</label>
                        <InputText @bind-Value="HotelAmenityDTO.Name" class="form-control"></InputText>
                        <ValidationMessage For="()=>HotelAmenityDTO.Name"></ValidationMessage>
                    </div>
                    <div class="form-group">
                        <label>Description</label>
                        <InputText @bind-Value="HotelAmenityDTO.Description" class="form-control"></InputText>
                        <ValidationMessage For="()=>HotelAmenityDTO.Description"></ValidationMessage>
                    </div>
                    <div class="form-group">
                        <label>Timing</label>
                        <InputText @bind-Value="HotelAmenityDTO.Timing" class="form-control"></InputText>
                        <ValidationMessage For="()=>HotelAmenityDTO.Timing"></ValidationMessage>
                    </div>
                    <div class="form-group">
                        <label>Icon</label>
                        <InputText @bind-Value="HotelAmenityDTO.IconStyle" class="form-control"></InputText>
                        <ValidationMessage For="()=>HotelAmenityDTO.IconStyle"></ValidationMessage>
                    </div>
                    <div class="form-group">
                        <button class="btn btn-primary">@Title Amenity</button>
                        <NavLink href="/hotel-amenity" class="btn btn-secondary">Back to Index</NavLink>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public int? Id { get; set; }

    private string Title { get; set; } = "Create";
    public HotelAmenityDTO HotelAmenityDTO { get; set; } = new HotelAmenityDTO();


    protected override async Task OnInitializedAsync()
    {
        if (Id is not null)
        {
            //update
            Title = "Update";
            HotelAmenityDTO = await HotelAmenityRepository.GetHotelAmenityById(Id.Value);
        }
        else
        {
            //create
            HotelAmenityDTO = new HotelAmenityDTO();
        }
    }

    private async Task HandleHotelAmenityUpsert()
    {
        try
        {
            if (HotelAmenityDTO.Id != 0 && Title == "Update")
            {
                var updatedAmenityResult = await HotelAmenityRepository.UpdateHotelAmenityById(HotelAmenityDTO.Id, HotelAmenityDTO);
                if (updatedAmenityResult is not null)
                {
                    await JSRuntime.ToastrSuccess("Hotel amenity updated successfully!");
                }
            }
            else
            {
                //create
                var createdResult = await HotelAmenityRepository.CreateHotelAmenity(HotelAmenityDTO);
                await JSRuntime.ToastrSuccess("Hotel amenity creadted successfully!");
            }
        }
        catch (Exception ex)
        {

            //handle exception
        }

        NavigationManager.NavigateTo("hotel-amenity");
    }
}
